# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- develop

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5a3a0d92-5463-49f0-b421-f6182f124de0'
  imageRepository: 'vedanthanantapallydotnetdemo'
  containerRegistry: 'samplehelmrepo.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'samplehelmrepo3660cfdd-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**' # Copy all files and folders
        TargetFolder: '$(Pipeline.Workspace)'

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'vedanthanantapallydotnetdemo-2056.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          # - task: KubernetesManifest@0
          #   displayName: Deploy to Kubernetes cluster
          #   inputs:
          #     action: deploy
          #     manifests: |
          #       $(Pipeline.Workspace)/manifests/deployment.yml
          #       $(Pipeline.Workspace)/manifests/service.yml
          #     imagePullSecrets: |
          #       $(imagePullSecret)
          #     containers: |
          #       $(containerRegistry)/$(imageRepository):$(tag)
          # - task: HelmDeploy@0
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscription: 'Free Trial(c7895ff6-00b1-4f16-a93c-b0da4ac86e2a)'
          #     azureResourceGroup: 'Kubernetescluster'
          #     kubernetesCluster: 'sample-helm'
          #     command: 'upgrade'
          #     chartType: FilePath
          #     chartPath: '$(Pipeline.Workspace)/manifests/dotnet-demo-0.1.0.tgz'
          #     valuesFile: '$(Pipeline.Workspace)/manifests/values.yaml'
          # - task: HelmDeploy@0
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscription: 'Free Trial(c7895ff6-00b1-4f16-a93c-b0da4ac86e2a)'
          #     azureResourceGroup: 'Kubernetescluster'
          #     kubernetesCluster: 'sample-helm'
          #     command: 'upgrade'
          #     chartType: 'Name'
          #     chartName: 'chart.yaml'
          #     valueFile: 'values.yaml'

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Free Trial(c7895ff6-00b1-4f16-a93c-b0da4ac86e2a)'
              azureResourceGroup: 'Kubernetescluster'
              kubernetesCluster: 'sample-helm'
              command: 'install'  # Use "install" command instead of "upgrade"
              chartType: 'Name'   # Set the chart type to "Name"
              chartName: '$(Pipeline.Workspace)/manifests/dotnet-demo.tgz'  # Specify the name of the chart
              # valuesFile: '$(Pipeline.Workspace)/manifests/values.yaml'


          


