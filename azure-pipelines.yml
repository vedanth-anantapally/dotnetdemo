# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- develop

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '61bd1c6f-fd77-4574-9397-dc54b943cd58'
  imageRepository: 'dotnet'
  containerRegistry: 'samplehelmrepo.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'completedotnetsampleapp7086bd71-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'vedanthanantapallydotnetdemo-1472.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Free Trial(c7895ff6-00b1-4f16-a93c-b0da4ac86e2a)'
              azureResourceGroup: 'Kubernetescluster'
              kubernetesCluster: 'sample-helm'
              command: 'upgrade'
              chartType: 'Name'
              chartName: 'Chart.yaml'
              valueFile: 'values.yaml'

          # - task: KubernetesManifest@0
          #   displayName: Deploy to Kubernetes cluster
          #   inputs:
          #     action: deploy
          #     manifests: |
          #       $(Pipeline.Workspace)/manifests/deployment.yaml
          #       $(Pipeline.Workspace)/manifests/service.yaml
          #     imagePullSecrets: |
          #       $(imagePullSecret)
          #     containers: |
          #       $(containerRegistry)/$(imageRepository):$(tag)



# - stage: ProductionEnv
#   displayName: Deploy stage
#   dependsOn: Build

  # jobs:
  # - deployment: Deploy
  #   displayName: Deploy
  #   pool:
  #     vmImage: $(vmImageName)
  #   environment: 'ProductionEnv.default'
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: KubernetesManifest@0
  #           displayName: Create imagePullSecret
  #           inputs:
  #             action: createSecret
  #             secretName: $(imagePullSecret)
  #             dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

  #         # - task: KubernetesManifest@0
  #         #   displayName: Deploy to Kubernetes cluster
  #         #   inputs:
  #         #     action: deploy
  #         #     manifests: |
  #         #       $(Pipeline.Workspace)/manifests/deployment.yaml
  #         #       $(Pipeline.Workspace)/manifests/service.yaml
  #         #     imagePullSecrets: |
  #         #       $(imagePullSecret)
  #         #     containers: |
  #         #       $(containerRegistry)/$(imageRepository):$(tag)


