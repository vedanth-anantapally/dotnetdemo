# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- develop

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'e95dd9fd-52e1-4dc4-949e-2050de2a4f4a'
  imageRepository: 'vedanthanantapallydotnetdemo'
  containerRegistry: 'completedotnetsampleapp.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'completedotnetsampleapp4964ddc0-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: UAT Environment
  displayName: UAT Environment (User Acceptance Testing) stage
  dependsOn: Build

  jobs:
  - deployment: UATEnvironment
    displayName: UAT Environment
    pool:
      vmImage: $(vmImageName)
    environment: 'UAT Environment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster (UAT)
            inputs:
              action: deploy
              connectionType: 'azureResourceManager'
              azureSubscriptionEndpoint: 'Free Trial(c7895ff6-00b1-4f16-a93c-b0da4ac86e2a)'
              azureResourceGroup: 'Kuberenetescluster'
              kubernetesCluster: 'Kuberenetes-complete'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: Pre Prod
  displayName: Pre-Production stage
  dependsOn: UAT Environment

  jobs:
  - deployment: PreProd
    displayName: Pre Prod
    pool:
      vmImage: $(vmImageName)
    environment: 'Pre Prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster (PreProd)
            inputs:
              action: deploy
              connectionType: 'azureResourceManager'
              azureSubscriptionEndpoint: 'Free Trial(c7895ff6-00b1-4f16-a93c-b0da4ac86e2a)'
              azureResourceGroup: 'Kuberenetescluster'
              kubernetesCluster: 'Kuberenetes-complete'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: Production Environment
  displayName: Production Environment
  dependsOn: Pre Prod

  jobs:
  - deployment: ProductionEnvironment
    displayName: Production Environment
    pool:
      vmImage: $(vmImageName)
    environment: 'Production Environment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster (Production)
            inputs:
              action: deploy
              connectionType: 'azureResourceManager'
              azureSubscriptionEndpoint: 'Free Trial(c7895ff6-00b1-4f16-a93c-b0da4ac86e2a)'
              azureResourceGroup: 'Kuberenetescluster'
              kubernetesCluster: 'Kuberenetes-complete'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)


